--- TODO(timurkarev) убрать в библиотеку
local function hit_collider(position, width, height, hit_point)
	-- Extract GO's center position for clarity
	local go_x, go_y = position.x, position.y

	-- Calculate half width and half height for efficient AABB (Axis Aligned Bounding Box) check
	local half_width = width / 2
	local half_height = height / 2

	-- Check if the point is within the GO's AABB
	return (
	hit_point.x >= go_x - half_width and
	hit_point.x <= go_x + half_width and
	hit_point.y >= go_y - half_height and
	hit_point.y <= go_y + half_height
)
end

go.property("id", 1) -- <1>
go.property("width", 100)
go.property("height", 100)

function init(self)
	msg.post(".", "acquire_input_focus")
	self.main_state = require('main.state')
end

function update(self, dt)
	local value = self.main_state.field[self.id]
	if value == 0 then 
		msg.post("#sprite", 'disable')
	elseif value > 0 then 
		msg.post("#sprite", 'enable')
		msg.post("#sprite", "play_animation", {id = hash("x")})
	elseif value < 0 then
		msg.post("#sprite", 'enable')
	msg.post("#sprite", "play_animation", {id = hash("o")}) 
	end
end

local function touch_pressed(self)
	if self.main_state.field[self.id] == 0 then 
		self.main_state.field[self.id] = 1
	elseif self.main_state.field[self.id] == 1 then 
		self.main_state.field[self.id] = -1 
	elseif self.main_state.field[self.id] == -1 then
		self.main_state.field[self.id] = 0
	end
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed and hit_collider(go.get_position("."), self.width, self.height, vmath.vector3(action.x, action.y, 0)) then
		touch_pressed(self)
	end
end